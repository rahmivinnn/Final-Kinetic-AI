// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String
  role          UserRole  @default(PATIENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]
  subscriptions Subscription[]
  exercises     UserExercise[]
  appointments  Appointment[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Exercise {
  id          String   @id @default(cuid())
  name        String
  description String   @db.Text
  category    String
  difficulty  String
  duration    Int      // in minutes
  videoUrl    String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userExercises UserExercise[]
  
  @@map("exercises")
}

model UserExercise {
  id         String   @id @default(cuid())
  userId     String
  exerciseId String
  completed  Boolean  @default(false)
  progress   Int      @default(0)
  lastDone   DateTime?
  user       User     @relation(fields: [userId], references: [id])
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  
  @@map("user_exercises")
}

model Appointment {
  id          String   @id @default(cuid())
  userId      String
  therapistId String
  dateTime    DateTime
  duration    Int      @default(30) // in minutes
  status      AppointmentStatus @default(PENDING)
  notes       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation("patient", fields: [userId], references: [id])
  therapist   User     @relation("therapist", fields: [therapistId], references: [id])
  
  @@map("appointments")
}

model Subscription {
  id             String   @id @default(cuid())
  userId         String
  status         SubscriptionStatus @default(INACTIVE)
  planId         String
  currentPeriodEnd DateTime
  cancelAtPeriodEnd Boolean @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
  
  @@map("subscriptions")
}

enum UserRole {
  PATIENT
  THERAPIST
  ADMIN
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  UNPAID
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  INACTIVE
}
